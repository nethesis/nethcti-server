{
  "name": "jsplugs",
  "description": "Dead-stupid init.d-like plugin manager for node.js",
  "version": "0.1.0",
  "author": {
    "name": "Elad Ben-Israel"
  },
  "main": "./main",
  "keywords": [
    "plugins",
    "components",
    "init.d"
  ],
  "license": "MIT",
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "~0.6.4",
    "express": "~2.5.5"
  },
  "scripts": {
    "test": "nodeunit test/"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/eladb/node-jsplugs"
  },
  "readme": "# jsplugs [![Build Status](https://secure.travis-ci.org/eladb/node-jsplugs.png)](http://travis-ci.org/eladb/node-jsplugs)\n\nDead-stupid init.d-like plugin manager for node.js.\n\n```bash\n$ npm install jsplugs\n```\n\n## Usage ##\n\n### jsplugs() ###\n\nReturns a _jsplugs_ object that contains plugs.\n\n### jsplugs.require(...) ###\n\nLoads plugs into the jsplugs object.\n\n```js\nrequire('/path/to/plugs')\nrequire('/path/to/plugs/myplug.js')\nrequire([ 'dir1', 'dir2', ... ])\nrequire('dir1', 'myplug2.js', ...)\n```\n\nReturns `jsplugs.plugs`.\n\n### jsplugs.plugs ###\n\nReturns a hash of all the plugs loaded, in order. Each plug has an ordinal. Ordinals are a numeric prefix \nto plug filenames (e.g. the ordinal of `010.xyz.js` is 010). Files without an ordinal are always last.\n\n\n## Using as Express Middleware ##\n\nThis example shows how to use _jsplugs_ to plug in middleware into an express server. jsplugs fits well here because\nit supports ordering using ordinal prefix.\n\nGiven the directory structure:\n\n * ./middleware\n * ./middleware/050.cors.js\n * ./middleware/100.auth.js\n * ./middleware/120.log.js\n * ./middleware/200.app.js\n * ./middleware/999.errors.js\n\n```js\nvar express = require('express');\n\n// create an instance of `jsplugs` and load all the plugs under ./middleware\n// now middleware contains an ordered hash of all the plugs and their require()ed payload.\nvar middleware = require('jsplugs')().require('./middleware');\n\nvar server = express.createServer();\nfor (var mw in middleware) {\n    console.log('using', mw);\n    server.use(middleware[mw]);\n}\n\nserver.listen(8080);\n```\n\nRunning:\n\n```bash\n$ node express.js &\n[2] 65761\nusing auth\nusing log\nusing app\nusing errors\nusing cors\n\n$ curl http://localhost:8080\nin auth\nin log\nin app\nin errors\n```\n\n## License\n\nMIT",
  "readmeFilename": "README.md",
  "_id": "jsplugs@0.1.0",
  "dist": {
    "shasum": "da36eeab8a64df51162caf09b1f98b1950b44c78"
  },
  "_from": "jsplugs@0.1.0",
  "_resolved": "https://registry.npmjs.org/jsplugs/-/jsplugs-0.1.0.tgz"
}
