{
  "name": "odbc",
  "description": "unixodbc bindings for node",
  "version": "0.6.3",
  "main": "lib/odbc.js",
  "homepage": "http://github.com/wankdanker/node-odbc/",
  "repository": {
    "type": "git",
    "url": "git://github.com/wankdanker/node-odbc.git"
  },
  "bugs": {
    "url": "https://github.com/w1nk/node-odbc/issues"
  },
  "contributors": [
    {
      "name": "Dan VerWeire",
      "email": "dverweire@gmail.com"
    },
    {
      "name": "Lee Smith",
      "email": "notwink@gmail.com"
    }
  ],
  "directories": {
    "lib": "."
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "preinstall": "node-gyp configure build",
    "test": "cd test && node run-tests.js"
  },
  "dependencies": {
    "bindings": "~1.0.0"
  },
  "readme": "node-odbc\n---------\n\nAn asynchronous/synchronous interface for node.js to unixODBC and its supported\ndrivers.\n\nrequirements\n------------\n\n* unixODBC binaries and development libraries for module compilation\n  * on Ubuntu/Debian `sudo apt-get install unixodbc unixodbc-dev`\n  * on OSX using macports.org `sudo port unixODBC`\n* odbc drivers for target database\n* properly configured odbc.ini and odbcinst.ini.\n\ninstall\n-------\n\nAfter insuring that all requirements are installed you may install by one of the\ntwo following options:\n\n### git\n\n```bash\ngit clone git://github.com/wankdanker/node-odbc.git\ncd node-odbc\nnode-gyp configure build\n```\n### npm\n\n```bash\nnpm install odbc\n```\n\nquick example\n-------------\n\n```javascript\nvar db = require('odbc')()\n  , cn = process.env.ODBC_CONNECTION_STRING\n  ;\n\ndb.open(cn, function (err) {\n  if (err) return console.log(err);\n  \n  db.query('select * from user where user_id = ?', [42], function (err, data) {\n    if (err) console.log(err);\n    \n    console.log(data);\n\n    db.close(function () {\n      console.log('done');\n    });\n  });\n});\n```\n\napi\n---\n\n### Database\n\nThe simple api is based on instances of the `Database` class. You may get an \ninstance in one of the following ways:\n\n```javascript\nrequire(\"odbc\").open(connectionString, function (err, db){\n  //db is already open now if err is falsy\n});\n```\n\nor by using the helper function:\n\n```javascript\nvar db = require(\"odbc\")();\n``` \n\nor by creating an instance with the constructor function:\n\n```javascript\nvar Database = require(\"odbc\").Database\n  , db = new Database();\n```\n\n#### .open(connectionString, callback)\n\nOpen a connection to a database.\n\n* **connectionString** - The ODBC connection string for your database\n* **callback** - `callback (err)`\n\n```javascript\nvar db = require(\"odbc\")()\n\t, cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n\t;\n\ndb.open(cn, function (err) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\n\t//we now have an open connection to the database\n});\n```\n#### .openSync(connectionString)\n\nSynchronously open a connection to a database.\n\n* **connectionString** - The ODBC connection string for your database\n\n```javascript\nvar db = require(\"odbc\")()\n  , cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n  ;\n\ntry {\n  var result = db.openSync(cn);\n}\ncatch (e) {\n  console.log(e.message);\n}\n\n//we now have an open connection to the database\n```\n\n#### .query(sqlQuery [, bindingParameters], callback)\n\nIssue an asynchronous SQL query to the database which is currently open.\n\n* **sqlQuery** - The SQL query to be executed.\n* **bindingParameters** - _OPTIONAL_ - An array of values that will be bound to\n    any '?' characters in `sqlQuery`.\n* **callback** - `callback (err, rows, moreResultSets)`\n\n```javascript\nvar db = require(\"odbc\")()\n\t, cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n\t;\n\ndb.open(cn, function (err) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\n\t//we now have an open connection to the database\n\t//so lets get some data\n\tdb.query(\"select top 10 * from customers\", function (err, rows, moreResultSets) {\n\t\tif (err) {\n\t\t\treturn console.log(err);\n\t\t}\n\t\t\n\t\tconsole.log(rows);\n\n\t\t//if moreResultSets is truthy, then this callback function will be called\n\t\t//again with the next set of rows.\n\t});\n});\n```\n\n#### .querySync(sqlQuery [, bindingParameters])\n\nSynchronously issue a SQL query to the database that is currently open.\n\n* **sqlQuery** - The SQL query to be executed.\n* **bindingParameters** - _OPTIONAL_ - An array of values that will be bound to\n    any '?' characters in `sqlQuery`.\n\n```javascript\nvar db = require(\"odbc\")()\n  , cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n  ;\n\n//blocks until the connection is opened.\ndb.openSync(cn);\n\n//blocks until the query is completed and all data has been acquired\nvar rows = db.querySync(\"select top 10 * from customers\");\n\nconsole.log(rows);\n```\n\n#### .close(callback)\n\nClose the currently opened database.\n\n* **callback** - `callback (err)`\n\n```javascript\nvar db = require(\"odbc\")()\n\t, cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n\t;\n\ndb.open(cn, function (err) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\t\n\t//we now have an open connection to the database\n\t\n\tdb.close(function (err) {\n\t\tconsole.log(\"the database connection is now closed\");\n\t});\n});\n```\n\n#### .closeSync()\n\nSynchronously close the currently opened database.\n\n```javascript\nvar db = require(\"odbc\")()\n  , cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n  ;\n\n//Blocks until the connection is open\ndb.openSync(cn);\n\n//Blocks until the connection is closed\ndb.closeSync();\n```\n\n#### .prepare(sql, callback)\n\nPrepare a statement for execution.\n\n* **sql** - SQL string to prepare\n* **callback** - `callback (err, stmt)`\n\nReturns a `Statement` object via the callback\n\n```javascript\nvar db = require(\"odbc\")()\n  , cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n  ;\n\n//Blocks until the connection is open\ndb.openSync(cn);\n\ndb.prepare(\"insert into hits (col1, col2) VALUES (?, ?)\", function (err, stmt) {\n  if (err) {\n    //could not prepare for some reason\n    console.log(err);\n    return db.closeSync();\n  }\n\n  //Bind and Execute the statment asynchronously\n  stmt.execute(['something', 42], function (err, result) {\n    result.closeSync();\n\n    //Close the connection\n    db.closeSync();\n  });\n})\n```\n\n#### .prepareSync(sql)\n\nSynchronously prepare a statement for execution.\n\n* **sql** - SQL string to prepare\n\nReturns a `Statement` object\n\n```javascript\nvar db = require(\"odbc\")()\n  , cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n  ;\n\n//Blocks until the connection is open\ndb.openSync(cn);\n\n//Blocks while preparing the statement\nvar stmt = db.prepareSync(\"insert into hits (col1, col2) VALUES (?, ?)\")\n\n//Bind and Execute the statment asynchronously\nstmt.execute(['something', 42], function (err, result) {\n  result.closeSync();\n\n  //Close the connection\n  db.closeSync();\n});\n```\n\n#### .beginTransaction(callback)\n\nBegin a transaction\n\n* **callback** - `callback (err)`\n\n#### .beginTransactionSync()\n\nSynchronously begin a transaction\n\n#### .commitTransaction(callback)\n\nCommit a transaction\n\n* **callback** - `callback (err)`\n\n```javascript\nvar db = require(\"odbc\")()\n  , cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n  ;\n\n//Blocks until the connection is open\ndb.openSync(cn);\n\ndb.beginTransaction(function (err) {\n  if (err) {\n    //could not begin a transaction for some reason.\n    console.log(err);\n    return db.closeSync();\n  }\n\n  var result = db.querySync(\"insert into customer (customerCode) values ('stevedave')\");\n\n  db.commitTransaction(function (err) {\n    if (err) {\n      //error during commit\n      console.log(err);\n      return db.closeSync();\n    }\n\n    console.log(db.querySync(\"select * from customer where customerCode = 'stevedave'\"));\n\n    //Close the connection\n    db.closeSync();\n  });\n})\n```\n\n#### .commitTransactionSync()\n\nSynchronously commit a transaction\n\n```javascript\nvar db = require(\"odbc\")()\n  , cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n  ;\n\n//Blocks until the connection is open\ndb.openSync(cn);\n\ndb.beginTransactionSync();\n\nvar result = db.querySync(\"insert into customer (customerCode) values ('stevedave')\");\n\ndb.commitTransactionSync();\n\nconsole.log(db.querySync(\"select * from customer where customerCode = 'stevedave'\"));\n\n//Close the connection\ndb.closeSync();\n```\n\n#### .rollbackTransaction(callback)\n\nRollback a transaction\n\n* **callback** - `callback (err)`\n\n```javascript\nvar db = require(\"odbc\")()\n  , cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n  ;\n\n//Blocks until the connection is open\ndb.openSync(cn);\n\ndb.beginTransaction(function (err) {\n  if (err) {\n    //could not begin a transaction for some reason.\n    console.log(err);\n    return db.closeSync();\n  }\n\n  var result = db.querySync(\"insert into customer (customerCode) values ('stevedave')\");\n\n  db.rollbackTransaction(function (err) {\n    if (err) {\n      //error during rollback\n      console.log(err);\n      return db.closeSync();\n    }\n\n    console.log(db.querySync(\"select * from customer where customerCode = 'stevedave'\"));\n\n    //Close the connection\n    db.closeSync();\n  });\n})\n```\n\n#### .rollbackTransactionSync()\n\nSynchronously rollback a transaction\n\n```javascript\nvar db = require(\"odbc\")()\n  , cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n  ;\n\n//Blocks until the connection is open\ndb.openSync(cn);\n\ndb.beginTransactionSync();\n\nvar result = db.querySync(\"insert into customer (customerCode) values ('stevedave')\");\n\ndb.rollbackTransactionSync();\n\nconsole.log(db.querySync(\"select * from customer where customerCode = 'stevedave'\"));\n\n//Close the connection\ndb.closeSync();\n```\n\n----------\n\n### Pool\n\nThe node-odbc `Pool` is a rudimentary connection pool which will attempt to have\ndatabase connections ready and waiting for you when you call the `open` method.\n\nIf you use a `Pool` instance, any connection that you close will cause another\nconnection to be opened for that same connection string. That connection will\nbe used the next time you call `Pool.open()` for the same connection string.\n\nThis should probably be changed.\n\n#### .open(connectionString, callback)\n\nGet a Database` instance which is already connected to `connectionString`\n\n* **connectionString** - The ODBC connection string for your database\n* **callback** - `callback (err, db)`\n\n```javascript\nvar Pool = require(\"odbc\").Pool\n\t, pool = new Pool()\n\t, cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n\t;\n\npool.open(cn, function (err, db) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\n\t//db is now an open database connection and can be used like normal\n\t//if we run some queries with db.query(...) and then call db.close();\n\t//a connection to `cn` will be re-opened silently behind the scense\n\t//and will be ready the next time we do `pool.open(cn)`\n});\n```\n\n#### .close(callback)\n\nClose all connections in the `Pool` instance\n\n* **callback** - `callback (err)`\n\n```javascript\nvar Pool = require(\"odbc\").Pool\n\t, pool = new Pool()\n\t, cn = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\"\n\t;\n\npool.open(cn, function (err, db) {\n\tif (err) {\n\t\treturn console.log(err);\n\t}\n\n\t//db is now an open database connection and can be used like normal\n\t//but all we will do now is close the whole pool\n\t\n\tpool.close(function () {\n\t\tconsole.log(\"all connections in the pool are closed\");\n\t});\n});\n```\n\nexample\n-------\n\n```javascript\nvar odbc = require(\"odbc\")\n\t, util = require('util')\n\t, db = new odbc.Database()\n\t;\n\nvar connectionString = \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname\";\n\ndb.open(connectionString, function(err) {\n\tdb.query(\"select * from table\", function(err, rows, moreResultSets) {\n\t\tconsole.log(util.inspect(rows, null, 10));\n\t\t\n\t\tdb.close(function() {\n\t\t\tconsole.log(\"Database connection closed\");\n\t\t});\n\t});\n});\n```\n\ntesting\n-------\n\nTests can be run by executing `npm test` from within the root of the node-odbc\ndirectory. You can also run the tests by executing `node run-tests.js` from\nwithin the `/test` directory.\n\nBy default, the tests are setup to run against a sqlite3 database which is\ncreated at test time. This will require proper installation of the sqlite odbc\ndriver. On Ubuntu: `sudo apt-get install libsqliteodbc`\n\nbuild options\n-------------\n\n### Debug\n\nIf you would like to enable debugging messages to be displayed you can add the \nflag `DEBUG` to the defines section of the `binding.gyp` file and then execute \n`node-gyp rebuild`.\n\n```javascript\n<snip>\n'defines' : [\n  \"DEBUG\"\n],\n<snip>\n```\n\n### Dynodbc\n\nYou may also enable the ability to load a specific ODBC driver and bypass the \nODBC driver management layer. A performance increase of ~5Kqps was seen using\nthis method with the libsqlite3odbc driver. To do this, specify the `dynodbc`\nflag in the defines section of the `binding.gyp` file. You will also need to \nremove any library references in `binding.gyp`. Then execute `node-gyp\nrebuild`.\n\n```javascript\n<snip>\n'defines' : [\n  \"dynodbc\"\n],\n'conditions' : [\n  [ 'OS == \"linux\"', {\n    'libraries' : [ \n      //remove this: '-lodbc' \n    ],\n<snip>\n```\n\n### Unicode\n\nBy default, UNICODE suppport is enabled. This should provide the most accurate\nway to get Unicode strings submitted to your database. For best results, you \nmay want to put your Unicode string into bound parameters. \n\nHowever, if you experience issues or you think that submitting UTF8 strings will\nwork better or faster, you can remove the `UNICODE` define in `binding.gyp`\n\n```javascript\n<snip>\n'defines' : [\n  \"UNICODE\"\n],\n<snip>\n```\n\n### timegm vs timelocal\n\nWhen converting a database time to a C time one may use `timegm` or `timelocal`. See\n`man timegm` for the details of these two functions. By default the node-odbc bindings\nuse `timelocal`. If you would prefer for it to use `timegm` then specify the `TIMEGM`\ndefine in `binding.gyp`\n\n```javascript\n<snip>\n'defines' : [\n  \"TIMEGM\"\n],\n<snip>\n```\n\n### Strict Column Naming\n\nWhen column names are retrieved from ODBC, you can request by SQL_DESC_NAME or\nSQL_DESC_LABEL. SQL_DESC_NAME is the exact column name or none if there is none\ndefined. SQL_DESC_LABEL is the heading or column name or calculation. \nSQL_DESC_LABEL is used by default and seems to work well in most cases.\n\nIf you want to use the exact column name via SQL_DESC_NAME, enable the `STRICT_COLUMN_NAMES`\ndefine in `binding.gyp`\n\n```javascript\n<snip>\n'defines' : [\n  \"STRICT_COLUMN_NAMES\"\n],\n<snip>\n```\n\ntips\n----\n### Using node < v0.10 on Linux\n\nBe aware that through node v0.9 the uv_queue_work function, which is used to \nexecute the ODBC functions on a separate thread, uses libeio for its thread \npool. This thread pool by default is limited to 4 threads.\n\nThis means that if you have long running queries spread across multiple \ninstances of odbc.Database() or using odbc.Pool(), you will only be able to \nhave 4 concurrent queries.\n\nYou can increase the thread pool size by using @developmentseed's [node-eio]\n(https://github.com/developmentseed/node-eio).\n\n#### install: \n```bash\nnpm install eio\n```\n\n#### usage:\n```javascript\nvar eio = require('eio'); \neio.setMinParallel(threadCount);\n```\n\n### Using the FreeTDS ODBC driver\n\n* If you have column names longer than 30 characters, you should add \n  \"TDS_Version=7.0\" to your connection string to retrive the full column name.\n  * Example : \"DRIVER={FreeTDS};SERVER=host;UID=user;PWD=password;DATABASE=dbname;TDS_Version=7.0\"\n* If you got error \"[unixODBC][FreeTDS][SQL Server]Unable to connect to data source\" \n  Try use SERVERNAME instead of SERVER\n  * Example : \"DRIVER={FreeTDS};SERVERNAME=host;UID=user;PWD=password;DATABASE=dbname\"\n* Be sure that your odbcinst.ini has the proper threading configuration for your\n  FreeTDS driver. If you choose the incorrect threading model it may cause\n  the thread pool to be blocked by long running queries. This is what \n  @wankdanker currently uses on Ubuntu 12.04:\n\n```\n[FreeTDS]\nDescription     = TDS driver (Sybase/MS SQL)\nDriver          = libtdsodbc.so\nSetup           = libtdsS.so\nCPTimeout       = 120\nCPReuse         = \nThreading       = 0\n```\n\ncontributors\n------\n* Dan VerWeire (dverweire@gmail.com)\n* Lee Smith (notwink@gmail.com)\n* Bruno Bigras\n* Christian Ensel\n* Yorick\n* Joachim Kainz\n* Oleg Efimov\n* paulhendrix\n\nlicense\n-------\n\nCopyright (c) 2013 Dan VerWeire <dverweire@gmail.com>\n\nCopyright (c) 2010 Lee Smith <notwink@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR \nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER \nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "odbc@0.6.3",
  "_from": "odbc@"
}
